{"ast":null,"code":"var Utils = require('./utils');\nvar ECCode = require('./error-correction-code');\nvar ECLevel = require('./error-correction-level');\nvar Mode = require('./mode');\nvar isArray = require('isarray');\n\n// Generator polynomial used to encode version information\nvar G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nvar G18_BCH = Utils.getBCHDigit(G18);\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion;\n    }\n  }\n  return undefined;\n}\nfunction getReservedBitsCount(mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4;\n}\nfunction getTotalBitsFromDataArray(segments, version) {\n  var totalBits = 0;\n  segments.forEach(function (data) {\n    var reservedBits = getReservedBitsCount(data.mode, version);\n    totalBits += reservedBits + data.getBitsLength();\n  });\n  return totalBits;\n}\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    var length = getTotalBitsFromDataArray(segments, currentVersion);\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid(version) {\n  return !isNaN(version) && version >= 1 && version <= 40;\n};\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from(value, defaultValue) {\n  if (exports.isValid(value)) {\n    return parseInt(value, 10);\n  }\n  return defaultValue;\n};\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n  if (!exports.isValid(version)) {\n    throw new Error('Invalid QR Code version');\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE;\n\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version);\n\n  // Total number of error correction codewords\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n\n  // Total number of data codewords\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor(usableBits / 10 * 3);\n    case Mode.ALPHANUMERIC:\n      return Math.floor(usableBits / 11 * 2);\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13);\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8);\n  }\n};\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n  var seg;\n  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n  if (isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl);\n    }\n    if (data.length === 0) {\n      return 1;\n    }\n    seg = data[0];\n  } else {\n    seg = data;\n  }\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits(version) {\n  if (!exports.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version');\n  }\n  var d = version << 12;\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n  }\n  return version << 12 | d;\n};","map":{"version":3,"names":["Utils","require","ECCode","ECLevel","Mode","isArray","G18","G18_BCH","getBCHDigit","getBestVersionForDataLength","mode","length","errorCorrectionLevel","currentVersion","exports","getCapacity","undefined","getReservedBitsCount","version","getCharCountIndicator","getTotalBitsFromDataArray","segments","totalBits","forEach","data","reservedBits","getBitsLength","getBestVersionForMixedData","MIXED","isValid","isNaN","from","value","defaultValue","parseInt","Error","BYTE","totalCodewords","getSymbolTotalCodewords","ecTotalCodewords","getTotalCodewordsCount","dataTotalCodewordsBits","usableBits","NUMERIC","Math","floor","ALPHANUMERIC","KANJI","getBestVersionForData","seg","ecl","M","getLength","getEncodedBits","d"],"sources":["C:/Users/alero/OneDrive/Documentos/GitHub/proyecto/parte C/node_modules/qrcode/lib/core/version.js"],"sourcesContent":["var Utils = require('./utils')\nvar ECCode = require('./error-correction-code')\nvar ECLevel = require('./error-correction-level')\nvar Mode = require('./mode')\nvar isArray = require('isarray')\n\n// Generator polynomial used to encode version information\nvar G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nvar G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  var totalBits = 0\n\n  segments.forEach(function (data) {\n    var reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    var length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid (version) {\n  return !isNaN(version) && version >= 1 && version <= 40\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!exports.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  var seg\n\n  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!exports.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  var d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { getBigInt, getNumber, assert, assertArgument } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stringify(value) {\n  return JSON.stringify(value, (key, value) => {\n    if (typeof value === \"bigint\") {\n      return {\n        type: \"bigint\",\n        value: value.toString()\n      };\n    }\n    return value;\n  });\n}\n;\nconst defaultConfig = {\n  stallTimeout: 400,\n  priority: 1,\n  weight: 1\n};\nconst defaultState = {\n  blockNumber: -2,\n  requests: 0,\n  lateResponses: 0,\n  errorResponses: 0,\n  outOfSync: -1,\n  unsupportedEvents: 0,\n  rollingDuration: 0,\n  score: 0,\n  _network: null,\n  _updateNumber: null,\n  _totalTime: 0,\n  _lastFatalError: null,\n  _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n    if (!config._updateNumber) {\n      config._updateNumber = (async () => {\n        try {\n          const blockNumber = await config.provider.getBlockNumber();\n          if (blockNumber > config.blockNumber) {\n            config.blockNumber = blockNumber;\n          }\n        } catch (error) {\n          config.blockNumber = -2;\n          config._lastFatalError = error;\n          config._lastFatalErrorTimestamp = getTime();\n        }\n        config._updateNumber = null;\n      })();\n    }\n    await config._updateNumber;\n    config.outOfSync++;\n    if (config._lastFatalError) {\n      break;\n    }\n  }\n}\nfunction _normalize(value) {\n  if (value == null) {\n    return \"null\";\n  }\n  if (Array.isArray(value)) {\n    return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n  }\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return _normalize(value.toJSON());\n  }\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n    case \"bigint\":\n    case \"number\":\n      return BigInt(value).toString();\n    case \"string\":\n      return JSON.stringify(value);\n    case \"object\":\n      {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(k => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\n      }\n  }\n  console.log(\"Could not serialize\", value);\n  throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n  if (\"error\" in value) {\n    const error = value.error;\n    return {\n      tag: _normalize(error),\n      value: error\n    };\n  }\n  const result = value.result;\n  return {\n    tag: _normalize(result),\n    value: result\n  };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n  const tally = new Map();\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    const t = tally.get(tag) || {\n      value,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(tag, t);\n  }\n  let best = null;\n  for (const r of tally.values()) {\n    if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n      best = r;\n    }\n  }\n  if (best) {\n    return best.value;\n  }\n  return undefined;\n}\nfunction getMedian(quorum, results) {\n  let resultWeight = 0;\n  const errorMap = new Map();\n  let bestError = null;\n  const values = [];\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    if (value instanceof Error) {\n      const e = errorMap.get(tag) || {\n        value,\n        weight: 0\n      };\n      e.weight += weight;\n      errorMap.set(tag, e);\n      if (bestError == null || e.weight > bestError.weight) {\n        bestError = e;\n      }\n    } else {\n      values.push(BigInt(value));\n      resultWeight += weight;\n    }\n  }\n  if (resultWeight < quorum) {\n    // We have quorum for an error\n    if (bestError && bestError.weight >= quorum) {\n      return bestError.value;\n    }\n    // We do not have quorum for a result\n    return undefined;\n  }\n  // Get the sorted values\n  values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);\n  const mid = Math.floor(values.length / 2);\n  // Odd-length; take the middle value\n  if (values.length % 2) {\n    return values[mid];\n  }\n  // Even length; take the ceiling of the mean of the center two values\n  return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n  // If any value or error meets quorum, that is our preferred result\n  const result = checkQuorum(quorum, results);\n  if (result !== undefined) {\n    return result;\n  }\n  // Otherwise, do we have any result?\n  for (const r of results) {\n    if (r.value) {\n      return r.value;\n    }\n  }\n  // Nope!\n  return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n  if (quorum === 1) {\n    return getNumber(getMedian(quorum, results), \"%internal\");\n  }\n  const tally = new Map();\n  const add = (result, weight) => {\n    const t = tally.get(result) || {\n      result,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(result, t);\n  };\n  for (const {\n    weight,\n    value\n  } of results) {\n    const r = getNumber(value);\n    add(r - 1, weight);\n    add(r, weight);\n    add(r + 1, weight);\n  }\n  let bestWeight = 0;\n  let bestResult = undefined;\n  for (const {\n    weight,\n    result\n  } of tally.values()) {\n    // Use this result, if this result meets quorum and has either:\n    // - a better weight\n    // - or equal weight, but the result is larger\n    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {\n      bestWeight = weight;\n      bestResult = result;\n    }\n  }\n  return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n  /**\n   *  The number of backends that must agree on a value before it is\n   *  accpeted.\n   */\n  quorum;\n  /**\n   *  @_ignore:\n   */\n  eventQuorum;\n  /**\n   *  @_ignore:\n   */\n  eventWorkers;\n  #configs;\n  #height;\n  #initialSyncPromise;\n  /**\n   *  Creates a new **FallbackProvider** with %%providers%% connected to\n   *  %%network%%.\n   *\n   *  If a [[Provider]] is included in %%providers%%, defaults are used\n   *  for the configuration.\n   */\n  constructor(providers, network, options) {\n    super(network, options);\n    this.#configs = providers.map(p => {\n      if (p instanceof AbstractProvider) {\n        return Object.assign({\n          provider: p\n        }, defaultConfig, defaultState);\n      } else {\n        return Object.assign({}, defaultConfig, p, defaultState);\n      }\n    });\n    this.#height = -2;\n    this.#initialSyncPromise = null;\n    if (options && options.quorum != null) {\n      this.quorum = options.quorum;\n    } else {\n      this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\n        accum += config.weight;\n        return accum;\n      }, 0) / 2);\n    }\n    this.eventQuorum = 1;\n    this.eventWorkers = 1;\n    assertArgument(this.quorum <= this.#configs.reduce((a, c) => a + c.weight, 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n  }\n  get providerConfigs() {\n    return this.#configs.map(c => {\n      const result = Object.assign({}, c);\n      for (const key in result) {\n        if (key[0] === \"_\") {\n          delete result[key];\n        }\n      }\n      return result;\n    });\n  }\n  async _detectNetwork() {\n    return Network.from(getBigInt(await this._perform({\n      method: \"chainId\"\n    })));\n  }\n  // @TODO: Add support to select providers to be the event subscriber\n  //_getSubscriber(sub: Subscription): Subscriber {\n  //    throw new Error(\"@TODO\");\n  //}\n  /**\n   *  Transforms a %%req%% into the correct method call on %%provider%%.\n   */\n  async _translatePerform(provider, req) {\n    switch (req.method) {\n      case \"broadcastTransaction\":\n        return await provider.broadcastTransaction(req.signedTransaction);\n      case \"call\":\n        return await provider.call(Object.assign({}, req.transaction, {\n          blockTag: req.blockTag\n        }));\n      case \"chainId\":\n        return (await provider.getNetwork()).chainId;\n      case \"estimateGas\":\n        return await provider.estimateGas(req.transaction);\n      case \"getBalance\":\n        return await provider.getBalance(req.address, req.blockTag);\n      case \"getBlock\":\n        {\n          const block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n          return await provider.getBlock(block, req.includeTransactions);\n        }\n      case \"getBlockNumber\":\n        return await provider.getBlockNumber();\n      case \"getCode\":\n        return await provider.getCode(req.address, req.blockTag);\n      case \"getGasPrice\":\n        return (await provider.getFeeData()).gasPrice;\n      case \"getLogs\":\n        return await provider.getLogs(req.filter);\n      case \"getStorage\":\n        return await provider.getStorage(req.address, req.position, req.blockTag);\n      case \"getTransaction\":\n        return await provider.getTransaction(req.hash);\n      case \"getTransactionCount\":\n        return await provider.getTransactionCount(req.address, req.blockTag);\n      case \"getTransactionReceipt\":\n        return await provider.getTransactionReceipt(req.hash);\n      case \"getTransactionResult\":\n        return await provider.getTransactionResult(req.hash);\n    }\n  }\n  // Grab the next (random) config that is not already part of\n  // the running set\n  #getNextConfig(running) {\n    // @TODO: Maybe do a check here to favour (heavily) providers that\n    //        do not require waitForSync and disfavour providers that\n    //        seem down-ish or are behaving slowly\n    const configs = Array.from(running).map(r => r.config);\n    // Shuffle the states, sorted by priority\n    const allConfigs = this.#configs.slice();\n    shuffle(allConfigs);\n    allConfigs.sort((a, b) => a.priority - b.priority);\n    for (const config of allConfigs) {\n      if (config._lastFatalError) {\n        continue;\n      }\n      if (configs.indexOf(config) === -1) {\n        return config;\n      }\n    }\n    return null;\n  }\n  // Adds a new runner (if available) to running.\n  #addRunner(running, req) {\n    const config = this.#getNextConfig(running);\n    // No runners available\n    if (config == null) {\n      return null;\n    }\n    // Create a new runner\n    const runner = {\n      config,\n      result: null,\n      didBump: false,\n      perform: null,\n      staller: null\n    };\n    const now = getTime();\n    // Start performing this operation\n    runner.perform = (async () => {\n      try {\n        config.requests++;\n        const result = await this._translatePerform(config.provider, req);\n        runner.result = {\n          result\n        };\n      } catch (error) {\n        config.errorResponses++;\n        runner.result = {\n          error\n        };\n      }\n      const dt = getTime() - now;\n      config._totalTime += dt;\n      config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n      runner.perform = null;\n    })();\n    // Start a staller; when this times out, it's time to force\n    // kicking off another runner because we are taking too long\n    runner.staller = (async () => {\n      await stall(config.stallTimeout);\n      runner.staller = null;\n    })();\n    running.add(runner);\n    return runner;\n  }\n  // Initializes the blockNumber and network for each runner and\n  // blocks until initialized\n  async #initialSync() {\n    let initialSync = this.#initialSyncPromise;\n    if (!initialSync) {\n      const promises = [];\n      this.#configs.forEach(config => {\n        promises.push((async () => {\n          await waitForSync(config, 0);\n          if (!config._lastFatalError) {\n            config._network = await config.provider.getNetwork();\n          }\n        })());\n      });\n      this.#initialSyncPromise = initialSync = (async () => {\n        // Wait for all providers to have a block number and network\n        await Promise.all(promises);\n        // Check all the networks match\n        let chainId = null;\n        for (const config of this.#configs) {\n          if (config._lastFatalError) {\n            continue;\n          }\n          const network = config._network;\n          if (chainId == null) {\n            chainId = network.chainId;\n          } else if (network.chainId !== chainId) {\n            assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"new FallbackProvider\"\n            });\n          }\n        }\n      })();\n    }\n    await initialSync;\n  }\n  async #checkQuorum(running, req) {\n    // Get all the result objects\n    const results = [];\n    for (const runner of running) {\n      if (runner.result != null) {\n        const {\n          tag,\n          value\n        } = normalizeResult(runner.result);\n        results.push({\n          tag,\n          value,\n          weight: runner.config.weight\n        });\n      }\n    }\n    // Are there enough results to event meet quorum?\n    if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {\n      return undefined;\n    }\n    switch (req.method) {\n      case \"getBlockNumber\":\n        {\n          // We need to get the bootstrap block height\n          if (this.#height === -2) {\n            this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter(c => !c._lastFatalError).map(c => ({\n              value: c.blockNumber,\n              tag: getNumber(c.blockNumber).toString(),\n              weight: c.weight\n            })))));\n          }\n          // Find the mode across all the providers, allowing for\n          // a little drift between block heights\n          const mode = getFuzzyMode(this.quorum, results);\n          if (mode === undefined) {\n            return undefined;\n          }\n          if (mode > this.#height) {\n            this.#height = mode;\n          }\n          return this.#height;\n        }\n      case \"getGasPrice\":\n      case \"estimateGas\":\n        return getMedian(this.quorum, results);\n      case \"getBlock\":\n        // Pending blocks are in the mempool and already\n        // quite untrustworthy; just grab anything\n        if (\"blockTag\" in req && req.blockTag === \"pending\") {\n          return getAnyResult(this.quorum, results);\n        }\n        return checkQuorum(this.quorum, results);\n      case \"call\":\n      case \"chainId\":\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n      case \"getStorage\":\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n      case \"getLogs\":\n        return checkQuorum(this.quorum, results);\n      case \"broadcastTransaction\":\n        return getAnyResult(this.quorum, results);\n    }\n    assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n      operation: `_perform(${stringify(req.method)})`\n    });\n  }\n  async #waitForQuorum(running, req) {\n    if (running.size === 0) {\n      throw new Error(\"no runners?!\");\n    }\n    // Any promises that are interesting to watch for; an expired stall\n    // or a successful perform\n    const interesting = [];\n    let newRunners = 0;\n    for (const runner of running) {\n      // No responses, yet; keep an eye on it\n      if (runner.perform) {\n        interesting.push(runner.perform);\n      }\n      // Still stalling...\n      if (runner.staller) {\n        interesting.push(runner.staller);\n        continue;\n      }\n      // This runner has already triggered another runner\n      if (runner.didBump) {\n        continue;\n      }\n      // Got a response (result or error) or stalled; kick off another runner\n      runner.didBump = true;\n      newRunners++;\n    }\n    // Check if we have reached quorum on a result (or error)\n    const value = await this.#checkQuorum(running, req);\n    if (value !== undefined) {\n      if (value instanceof Error) {\n        throw value;\n      }\n      return value;\n    }\n    // Add any new runners, because a staller timed out or a result\n    // or error response came in.\n    for (let i = 0; i < newRunners; i++) {\n      this.#addRunner(running, req);\n    }\n    // All providers have returned, and we have no result\n    assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n      request: \"%sub-requests\",\n      info: {\n        request: req,\n        results: Array.from(running).map(r => stringify(r.result))\n      }\n    });\n    // Wait for someone to either complete its perform or stall out\n    await Promise.race(interesting);\n    // This is recursive, but at worst case the depth is 2x the\n    // number of providers (each has a perform and a staller)\n    return await this.#waitForQuorum(running, req);\n  }\n  async _perform(req) {\n    // Broadcasting a transaction is rare (ish) and already incurs\n    // a cost on the user, so spamming is safe-ish. Just send it to\n    // every backend.\n    if (req.method === \"broadcastTransaction\") {\n      const results = await Promise.all(this.#configs.map(async ({\n        provider,\n        weight\n      }) => {\n        try {\n          const result = await provider._perform(req);\n          return Object.assign(normalizeResult({\n            result\n          }), {\n            weight\n          });\n        } catch (error) {\n          return Object.assign(normalizeResult({\n            error\n          }), {\n            weight\n          });\n        }\n      }));\n      const result = getAnyResult(this.quorum, results);\n      assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n        request: \"%sub-requests\",\n        info: {\n          request: req,\n          results: results.map(stringify)\n        }\n      });\n      if (result instanceof Error) {\n        throw result;\n      }\n      return result;\n    }\n    await this.#initialSync();\n    // Bootstrap enough runners to meet quorum\n    const running = new Set();\n    for (let i = 0; i < this.quorum; i++) {\n      this.#addRunner(running, req);\n    }\n    const result = await this.#waitForQuorum(running, req);\n    // Track requests sent to a provider that are still\n    // outstanding after quorum has been otherwise found\n    for (const runner of running) {\n      if (runner.perform && runner.result == null) {\n        runner.config.lateResponses++;\n      }\n    }\n    return result;\n  }\n  async destroy() {\n    for (const {\n      provider\n    } of this.#configs) {\n      provider.destroy();\n    }\n    super.destroy();\n  }\n}","map":{"version":3,"names":["getBigInt","getNumber","assert","assertArgument","AbstractProvider","Network","BN_1","BigInt","BN_2","shuffle","array","i","length","j","Math","floor","random","tmp","stall","duration","Promise","resolve","setTimeout","getTime","Date","stringify","value","JSON","key","type","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_network","_updateNumber","_totalTime","_lastFatalError","_lastFatalErrorTimestamp","waitForSync","config","provider","getBlockNumber","error","_normalize","Array","isArray","map","join","toJSON","keys","Object","sort","k","console","log","Error","normalizeResult","tag","result","checkQuorum","quorum","results","tally","Map","t","get","set","best","r","values","undefined","getMedian","resultWeight","errorMap","bestError","e","push","a","b","mid","getAnyResult","getFuzzyMode","add","bestWeight","bestResult","FallbackProvider","eventQuorum","eventWorkers","configs","height","initialSyncPromise","constructor","providers","network","options","p","assign","ceil","reduce","accum","c","providerConfigs","_detectNetwork","from","_perform","method","_translatePerform","req","broadcastTransaction","signedTransaction","call","transaction","blockTag","getNetwork","chainId","estimateGas","getBalance","address","block","blockHash","getBlock","includeTransactions","getCode","getFeeData","gasPrice","getLogs","filter","getStorage","position","getTransaction","hash","getTransactionCount","getTransactionReceipt","getTransactionResult","getNextConfig","#getNextConfig","running","allConfigs","slice","indexOf","addRunner","#addRunner","runner","didBump","perform","staller","now","dt","initialSync","#initialSync","promises","forEach","all","operation","#checkQuorum","mode","waitForQuorum","#waitForQuorum","size","interesting","newRunners","request","info","race","Set","destroy"],"sources":["C:/Users/alero/OneDrive/Documentos/GitHub/proyecto/parte C/node_modules/ethers/lib.esm/providers/provider-fallback.js"],"sourcesContent":["/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { getBigInt, getNumber, assert, assertArgument } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\nfunction getTime() { return (new Date()).getTime(); }\nfunction stringify(value) {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof (value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n;\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                }\n                catch (error) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) {\n            break;\n        }\n    }\n}\nfunction _normalize(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n        case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\n        }\n    }\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n    const tally = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n    let best = null;\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n    if (best) {\n        return best.value;\n    }\n    return undefined;\n}\nfunction getMedian(quorum, results) {\n    let resultWeight = 0;\n    const errorMap = new Map();\n    let bestError = null;\n    const values = [];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n            if (bestError == null || e.weight > bestError.weight) {\n                bestError = e;\n            }\n        }\n        else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) {\n            return bestError.value;\n        }\n        // We do not have quorum for a result\n        return undefined;\n    }\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1 : (b > a) ? 1 : 0));\n    const mid = Math.floor(values.length / 2);\n    // Odd-length; take the middle value\n    if (values.length % 2) {\n        return values[mid];\n    }\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) {\n        return result;\n    }\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) {\n            return r.value;\n        }\n    }\n    // Nope!\n    return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n    if (quorum === 1) {\n        return getNumber(getMedian(quorum, results), \"%internal\");\n    }\n    const tally = new Map();\n    const add = (result, weight) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n    let bestWeight = 0;\n    let bestResult = undefined;\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n    return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    quorum;\n    /**\n     *  @_ignore:\n     */\n    eventQuorum;\n    /**\n     *  @_ignore:\n     */\n    eventWorkers;\n    #configs;\n    #height;\n    #initialSyncPromise;\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers, network, options) {\n        super(network, options);\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState);\n            }\n            else {\n                return Object.assign({}, defaultConfig, p, defaultState);\n            }\n        });\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        }\n        else {\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n    get providerConfigs() {\n        return this.#configs.map((c) => {\n            const result = Object.assign({}, c);\n            for (const key in result) {\n                if (key[0] === \"_\") {\n                    delete result[key];\n                }\n            }\n            return result;\n        });\n    }\n    async _detectNetwork() {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider, req) {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash : req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running) {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n        const configs = Array.from(running).map((r) => r.config);\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (a.priority - b.priority));\n        for (const config of allConfigs) {\n            if (config._lastFatalError) {\n                continue;\n            }\n            if (configs.indexOf(config) === -1) {\n                return config;\n            }\n        }\n        return null;\n    }\n    // Adds a new runner (if available) to running.\n    #addRunner(running, req) {\n        const config = this.#getNextConfig(running);\n        // No runners available\n        if (config == null) {\n            return null;\n        }\n        // Create a new runner\n        const runner = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n        const now = getTime();\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            }\n            catch (error) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n            runner.perform = null;\n        })();\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n        running.add(runner);\n        return runner;\n    }\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync() {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises = [];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n                // Check all the networks match\n                let chainId = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) {\n                        continue;\n                    }\n                    const network = (config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    }\n                    else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n        await initialSync;\n    }\n    async #checkQuorum(running, req) {\n        // Get all the result objects\n        const results = [];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) {\n                    return undefined;\n                }\n                if (mode > this.#height) {\n                    this.#height = mode;\n                }\n                return this.#height;\n            }\n            case \"getGasPrice\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${stringify(req.method)})`\n        });\n    }\n    async #waitForQuorum(running, req) {\n        if (running.size === 0) {\n            throw new Error(\"no runners?!\");\n        }\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting = [];\n        let newRunners = 0;\n        for (const runner of running) {\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n            // This runner has already triggered another runner\n            if (runner.didBump) {\n                continue;\n            }\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) {\n                throw value;\n            }\n            return value;\n        }\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req);\n        }\n        // All providers have returned, and we have no result\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n    async _perform(req) {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            const results = await Promise.all(this.#configs.map(async ({ provider, weight }) => {\n                try {\n                    const result = await provider._perform(req);\n                    return Object.assign(normalizeResult({ result }), { weight });\n                }\n                catch (error) {\n                    return Object.assign(normalizeResult({ error }), { weight });\n                }\n            }));\n            const result = getAnyResult(this.quorum, results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            });\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        await this.#initialSync();\n        // Bootstrap enough runners to meet quorum\n        const running = new Set();\n        for (let i = 0; i < this.quorum; i++) {\n            this.#addRunner(running, req);\n        }\n        const result = await this.#waitForQuorum(running, req);\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n        return result;\n    }\n    async destroy() {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n//# sourceMappingURL=provider-fallback.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
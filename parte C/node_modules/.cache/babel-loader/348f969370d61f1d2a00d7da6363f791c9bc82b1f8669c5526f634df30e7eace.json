{"ast":null,"code":"var numeric = '[0-9]+';\nvar alphanumeric = '[A-Z $%*+-./:]+';\nvar kanji = '(?:[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|' + '[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B|' + '[\\u2010\\u2015\\u2018\\u2019\\u2025\\u2026\\u201C\\u201D\\u2225\\u2260]|' + '[\\u0391-\\u0451]|[\\u00A7\\u00A8\\u00B1\\u00B4\\u00D7\\u00F7])+';\nvar byte = '(?:(?![A-Z0-9 $%*+-./:]|' + kanji + ').)+';\nexports.KANJI = new RegExp(kanji, 'g');\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+-./:]+', 'g');\nexports.BYTE = new RegExp(byte, 'g');\nexports.NUMERIC = new RegExp(numeric, 'g');\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');\nvar TEST_KANJI = new RegExp('^' + kanji + '$');\nvar TEST_NUMERIC = new RegExp('^' + numeric + '$');\nvar TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+-./:]+$');\nexports.testKanji = function testKanji(str) {\n  return TEST_KANJI.test(str);\n};\nexports.testNumeric = function testNumeric(str) {\n  return TEST_NUMERIC.test(str);\n};\nexports.testAlphanumeric = function testAlphanumeric(str) {\n  return TEST_ALPHANUMERIC.test(str);\n};","map":{"version":3,"names":["numeric","alphanumeric","kanji","byte","exports","KANJI","RegExp","BYTE_KANJI","BYTE","NUMERIC","ALPHANUMERIC","TEST_KANJI","TEST_NUMERIC","TEST_ALPHANUMERIC","testKanji","str","test","testNumeric","testAlphanumeric"],"sources":["C:/Users/alero/OneDrive/Documentos/GitHub/proyecto/parte C/node_modules/qrcode/lib/core/regex.js"],"sourcesContent":["var numeric = '[0-9]+'\nvar alphanumeric = '[A-Z $%*+-./:]+'\nvar kanji = '(?:[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|' +\n  '[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B|' +\n  '[\\u2010\\u2015\\u2018\\u2019\\u2025\\u2026\\u201C\\u201D\\u2225\\u2260]|' +\n  '[\\u0391-\\u0451]|[\\u00A7\\u00A8\\u00B1\\u00B4\\u00D7\\u00F7])+'\nvar byte = '(?:(?![A-Z0-9 $%*+-./:]|' + kanji + ').)+'\n\nexports.KANJI = new RegExp(kanji, 'g')\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+-./:]+', 'g')\nexports.BYTE = new RegExp(byte, 'g')\nexports.NUMERIC = new RegExp(numeric, 'g')\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')\n\nvar TEST_KANJI = new RegExp('^' + kanji + '$')\nvar TEST_NUMERIC = new RegExp('^' + numeric + '$')\nvar TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+-./:]+$')\n\nexports.testKanji = function testKanji (str) {\n  return TEST_KANJI.test(str)\n}\n\nexports.testNumeric = function testNumeric (str) {\n  return TEST_NUMERIC.test(str)\n}\n\nexports.testAlphanumeric = function testAlphanumeric (str) {\n  return TEST_ALPHANUMERIC.test(str)\n}\n"],"mappings":"AAAA,IAAIA,OAAO,GAAG,QAAQ;AACtB,IAAIC,YAAY,GAAG,iBAAiB;AACpC,IAAIC,KAAK,GAAG,qDAAqD,GAC/D,yEAAyE,GACzE,iEAAiE,GACjE,0DAA0D;AAC5D,IAAIC,IAAI,GAAG,0BAA0B,GAAGD,KAAK,GAAG,MAAM;AAEtDE,OAAO,CAACC,KAAK,GAAG,IAAIC,MAAM,CAACJ,KAAK,EAAE,GAAG,CAAC;AACtCE,OAAO,CAACG,UAAU,GAAG,IAAID,MAAM,CAAC,qBAAqB,EAAE,GAAG,CAAC;AAC3DF,OAAO,CAACI,IAAI,GAAG,IAAIF,MAAM,CAACH,IAAI,EAAE,GAAG,CAAC;AACpCC,OAAO,CAACK,OAAO,GAAG,IAAIH,MAAM,CAACN,OAAO,EAAE,GAAG,CAAC;AAC1CI,OAAO,CAACM,YAAY,GAAG,IAAIJ,MAAM,CAACL,YAAY,EAAE,GAAG,CAAC;AAEpD,IAAIU,UAAU,GAAG,IAAIL,MAAM,CAAC,GAAG,GAAGJ,KAAK,GAAG,GAAG,CAAC;AAC9C,IAAIU,YAAY,GAAG,IAAIN,MAAM,CAAC,GAAG,GAAGN,OAAO,GAAG,GAAG,CAAC;AAClD,IAAIa,iBAAiB,GAAG,IAAIP,MAAM,CAAC,sBAAsB,CAAC;AAE1DF,OAAO,CAACU,SAAS,GAAG,SAASA,SAASA,CAAEC,GAAG,EAAE;EAC3C,OAAOJ,UAAU,CAACK,IAAI,CAACD,GAAG,CAAC;AAC7B,CAAC;AAEDX,OAAO,CAACa,WAAW,GAAG,SAASA,WAAWA,CAAEF,GAAG,EAAE;EAC/C,OAAOH,YAAY,CAACI,IAAI,CAACD,GAAG,CAAC;AAC/B,CAAC;AAEDX,OAAO,CAACc,gBAAgB,GAAG,SAASA,gBAAgBA,CAAEH,GAAG,EAAE;EACzD,OAAOF,iBAAiB,CAACG,IAAI,CAACD,GAAG,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
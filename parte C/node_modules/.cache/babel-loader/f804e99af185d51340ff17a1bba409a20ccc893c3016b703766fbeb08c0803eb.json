{"ast":null,"code":"/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;\n(function (globalObj) {\n  'use strict';\n\n  /*\r\n    bignumber.js v4.1.0\r\n    A JavaScript library for arbitrary-precision arithmetic.\r\n    https://github.com/MikeMcl/bignumber.js\r\n    Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n    MIT Expat Licence\r\n  */\n  var BigNumber,\n    isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    notBool = ' not a boolean or binary digit',\n    roundingMode = 'rounding mode',\n    tooManyDigits = 'number type has more than 15 significant digits',\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    /*\r\n     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n     * exception is thrown (if ERRORS is true).\r\n     */\n    MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n  function constructorFactory(config) {\n    var div,\n      parseNumeric,\n      // id tracks the caller function, so its name can be included in error messages.\n      id = 0,\n      P = BigNumber.prototype,\n      ONE = new BigNumber(1),\n      /********************************* EDITABLE DEFAULTS **********************************/\n\n      /*\r\n       * The default values below must be integers within the inclusive ranges stated.\r\n       * The values can also be changed at run-time using BigNumber.config.\r\n       */\n\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n      // 0 to MAX\n\n      /*\r\n       * The rounding mode used when rounding to the above decimal places, and when using\r\n       * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n       * UP         0 Away from zero.\r\n       * DOWN       1 Towards zero.\r\n       * CEIL       2 Towards +Infinity.\r\n       * FLOOR      3 Towards -Infinity.\r\n       * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n       * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n       * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n       * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n       * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n       */\n      ROUNDING_MODE = 4,\n      // 0 to 8\n\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n      // 0 to -MAX\n\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n      // 0 to MAX\n\n      // RANGE : [MIN_EXP, MAX_EXP]\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n      // -1 to -MAX\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n      // 1 to MAX\n\n      // Whether BigNumber Errors are ever thrown.\n      ERRORS = true,\n      // true or false\n\n      // Change to intValidatorNoErrors if ERRORS is false.\n      isValidInt = intValidatorWithErrors,\n      // intValidatorWithErrors/intValidatorNoErrors\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n      // true or false\n\n      /*\r\n       * The modulo mode used when calculating the modulus: a mod n.\r\n       * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n       * The remainder (r) is calculated as: r = a - n * q.\r\n       *\r\n       * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n       * DOWN      1 The remainder has the same sign as the dividend.\r\n       *             This modulo mode is commonly known as 'truncated division' and is\r\n       *             equivalent to (a % n) in JavaScript.\r\n       * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n       * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n       * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n       *             The remainder is always positive.\r\n       *\r\n       * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n       * modes are commonly used for the modulus operation.\r\n       * Although the other rounding modes can also be used, they may not give useful results.\r\n       */\n      MODULO_MODE = 1,\n      // 0 to 9\n\n      // The maximum number of significant digits of the result of the toPower operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n      // 0 to MAX\n\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        fractionGroupSize: 0\n      };\n\n    /******************************************************************************************/\n\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n     */\n    function BigNumber(n, b) {\n      var c,\n        e,\n        i,\n        num,\n        len,\n        str,\n        x = this;\n\n      // Enable constructor usage without new.\n      if (!(x instanceof BigNumber)) {\n        // 'BigNumber() constructor call without new: {n}'\n        if (ERRORS) raise(26, 'constructor call without new', n);\n        return new BigNumber(n, b);\n      }\n\n      // 'new BigNumber() base not an integer: {b}'\n      // 'new BigNumber() base out of range: {b}'\n      if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n        // Duplicate.\n        if (n instanceof BigNumber) {\n          x.s = n.s;\n          x.e = n.e;\n          x.c = (n = n.c) ? n.slice() : n;\n          id = 0;\n          return;\n        }\n        if ((num = typeof n == 'number') && n * 0 == 0) {\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n          // Fast path for integers.\n          if (n === ~~n) {\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\n            x.e = e;\n            x.c = [n];\n            id = 0;\n            return;\n          }\n          str = n + '';\n        } else {\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n      } else {\n        b = b | 0;\n        str = n + '';\n\n        // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n        // Allow exponential notation to be used with base 10 argument.\n        if (b == 10) {\n          x = new BigNumber(n instanceof BigNumber ? n : str);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        // Any number in exponential form will fail due to the [Ee][+-].\n        if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n          return parseNumeric(x, str, num, b);\n        }\n        if (num) {\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n          if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            // 'new BigNumber() number type has more than 15 significant digits: {n}'\n            raise(id, tooManyDigits, n);\n          }\n\n          // Prevent later check for length on converted number.\n          num = false;\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n        str = convertBase(str, 10, b, x.s);\n      }\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n      // Exponential form?\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++);\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n      str = str.slice(i, len + 1);\n      if (str) {\n        len = str.length;\n\n        // Disallow numbers with over 15 significant digits if number type.\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n        if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n          raise(id, tooManyDigits, x.s * n);\n        }\n        e = e - i - 1;\n\n        // Overflow?\n        if (e > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null;\n\n          // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n          } else {\n            i -= len;\n          }\n          for (; i--; str += '0');\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n      id = 0;\n    }\n\n    // CONSTRUCTOR PROPERTIES\n\n    BigNumber.another = constructorFactory;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object or an argument list, with one or many of the following properties or\r\n     * parameters respectively:\r\n     *\r\n     *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n     *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n     *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n     *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n     *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n     *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n     *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n     *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n     *   MODULO_MODE     {number}           0 to 9 inclusive\r\n     *   POW_PRECISION   {number}           0 to MAX inclusive\r\n     *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config(20, 4) is equivalent to\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined.\r\n     * Return an object with the properties current values.\r\n     */\n    BigNumber.config = BigNumber.set = function () {\n      var v,\n        p,\n        i = 0,\n        r = {},\n        a = arguments,\n        o = a[0],\n        has = o && typeof o == 'object' ? function () {\n          if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n        } : function () {\n          if (a.length > i) return (v = a[i++]) != null;\n        };\n\n      // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n      // 'config() DECIMAL_PLACES not an integer: {v}'\n      // 'config() DECIMAL_PLACES out of range: {v}'\n      if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n        DECIMAL_PLACES = v | 0;\n      }\n      r[p] = DECIMAL_PLACES;\n\n      // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n      // 'config() ROUNDING_MODE not an integer: {v}'\n      // 'config() ROUNDING_MODE out of range: {v}'\n      if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n        ROUNDING_MODE = v | 0;\n      }\n      r[p] = ROUNDING_MODE;\n\n      // EXPONENTIAL_AT {number|number[]}\n      // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n      // 'config() EXPONENTIAL_AT not an integer: {v}'\n      // 'config() EXPONENTIAL_AT out of range: {v}'\n      if (has(p = 'EXPONENTIAL_AT')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n            TO_EXP_NEG = v[0] | 0;\n            TO_EXP_POS = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n        }\n      }\n      r[p] = [TO_EXP_NEG, TO_EXP_POS];\n\n      // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n      // 'config() RANGE not an integer: {v}'\n      // 'config() RANGE cannot be zero: {v}'\n      // 'config() RANGE out of range: {v}'\n      if (has(p = 'RANGE')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n            MIN_EXP = v[0] | 0;\n            MAX_EXP = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n        }\n      }\n      r[p] = [MIN_EXP, MAX_EXP];\n\n      // ERRORS {boolean|number} true, false, 1 or 0.\n      // 'config() ERRORS not a boolean or binary digit: {v}'\n      if (has(p = 'ERRORS')) {\n        if (v === !!v || v === 1 || v === 0) {\n          id = 0;\n          isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n      r[p] = ERRORS;\n\n      // CRYPTO {boolean|number} true, false, 1 or 0.\n      // 'config() CRYPTO not a boolean or binary digit: {v}'\n      // 'config() crypto unavailable: {crypto}'\n      if (has(p = 'CRYPTO')) {\n        if (v === true || v === false || v === 1 || v === 0) {\n          if (v) {\n            v = typeof crypto == 'undefined';\n            if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n              CRYPTO = true;\n            } else if (ERRORS) {\n              raise(2, 'crypto unavailable', v ? void 0 : crypto);\n            } else {\n              CRYPTO = false;\n            }\n          } else {\n            CRYPTO = false;\n          }\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n      r[p] = CRYPTO;\n\n      // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n      // 'config() MODULO_MODE not an integer: {v}'\n      // 'config() MODULO_MODE out of range: {v}'\n      if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n        MODULO_MODE = v | 0;\n      }\n      r[p] = MODULO_MODE;\n\n      // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n      // 'config() POW_PRECISION not an integer: {v}'\n      // 'config() POW_PRECISION out of range: {v}'\n      if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n        POW_PRECISION = v | 0;\n      }\n      r[p] = POW_PRECISION;\n\n      // FORMAT {object}\n      // 'config() FORMAT not an object: {v}'\n      if (has(p = 'FORMAT')) {\n        if (typeof v == 'object') {\n          FORMAT = v;\n        } else if (ERRORS) {\n          raise(2, p + ' not an object', v);\n        }\n      }\n      r[p] = FORMAT;\n      return r;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * 'random() decimal places not an integer: {dp}'\r\n     * 'random() decimal places out of range: {dp}'\r\n     * 'random() crypto unavailable: {crypto}'\r\n     */\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n        dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n        k = mathceil(dp / LOG_BASE);\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n            // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            if (ERRORS) raise(14, 'crypto unavailable', crypto);\n          }\n        }\n\n        // Use Math.random.\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--);\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n\n    // PRIVATE FUNCTIONS\n\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n    function convertBase(str, baseOut, baseIn, sign) {\n      var d,\n        e,\n        k,\n        r,\n        x,\n        xc,\n        y,\n        i = str.indexOf('.'),\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE;\n      if (baseIn < 37) str = str.toLowerCase();\n\n      // Non-integer.\n      if (i >= 0) {\n        k = POW_PRECISION;\n\n        // Unlimited precision.\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k;\n\n        // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n        y.e = y.c.length;\n      }\n\n      // Convert the number as integer.\n      xc = toBaseOut(str, baseIn, baseOut);\n      e = k = xc.length;\n\n      // Remove trailing zeros.\n      for (; xc[--k] == 0; xc.pop());\n      if (!xc[0]) return '0';\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e;\n\n        // sign is needed for correct rounding.\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n      d = e + dp + 1;\n\n      // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n      i = xc[d];\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0.\n        str = r ? toFixedPoint('1', -dp) : '0';\n      } else {\n        xc.length = d;\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (k = xc.length; !xc[--k];);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\n        str = toFixedPoint(str, e);\n      }\n\n      // The caller will add the sign.\n      return str;\n    }\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n        return cmp;\n      }\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber(\n          // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n        if (yc[i] > (xc[i] || 0)) e--;\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n          // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0);\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (n)\n              //  2. if product > remainder: product -= divisor, n--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, n++\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder.\n                // Trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n              if (prodL < remL) prod = [0].concat(prod);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n              // If product was < remainder.\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.splice(0, 1);\n        }\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n          // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n        return q;\n      };\n    }();\n\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n is a BigNumber.\r\n     * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm is the rounding mode.\r\n     * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n     */\n    function format(n, i, rm, caller) {\n      var c0, e, ne, len, str;\n      rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n          str = toExponential(str, e);\n\n          // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e);\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n    // Handle BigNumber.max and BigNumber.min.\n    function maxOrMin(args, method) {\n      var m,\n        n,\n        i = 0;\n      if (isArray(args[0])) args = args[0];\n      m = new BigNumber(args[0]);\n      for (; ++i < args.length;) {\n        n = new BigNumber(args[i]);\n\n        // If any number is NaN, return NaN.\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n      return m;\n    }\n\n    /*\r\n     * Return true if n is an integer in range, otherwise throw.\r\n     * Use for argument validation when ERRORS is true.\r\n     */\n    function intValidatorWithErrors(n, min, max, caller, name) {\n      if (n < min || n > max || n != truncate(n)) {\n        raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n      }\n      return true;\n    }\n\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n        j = c.length;\n\n      // Remove trailing zeros.\n      for (; !c[--j]; c.pop());\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++);\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n      return n;\n    }\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, num, b) {\n        var base,\n          s = num ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!num) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // 'new BigNumber() not a number: {n}'\n          // 'new BigNumber() not a base {b} number: {n}'\n          if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n          x.s = null;\n        }\n        x.c = x.e = null;\n        id = 0;\n      };\n    }();\n\n    // Throw a BigNumber Error.\n    function raise(caller, msg, val) {\n      var error = new Error(['new BigNumber',\n      // 0\n      'cmp',\n      // 1\n      'config',\n      // 2\n      'div',\n      // 3\n      'divToInt',\n      // 4\n      'eq',\n      // 5\n      'gt',\n      // 6\n      'gte',\n      // 7\n      'lt',\n      // 8\n      'lte',\n      // 9\n      'minus',\n      // 10\n      'mod',\n      // 11\n      'plus',\n      // 12\n      'precision',\n      // 13\n      'random',\n      // 14\n      'round',\n      // 15\n      'shift',\n      // 16\n      'times',\n      // 17\n      'toDigits',\n      // 18\n      'toExponential',\n      // 19\n      'toFixed',\n      // 20\n      'toFormat',\n      // 21\n      'toFraction',\n      // 22\n      'pow',\n      // 23\n      'toPrecision',\n      // 24\n      'toString',\n      // 25\n      'BigNumber' // 26\n      ][caller] + '() ' + msg + ': ' + val);\n      error.name = 'BigNumber Error';\n      id = 0;\n      throw error;\n    }\n\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n    function round(x, sd, rm, r) {\n      var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++);\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n          r = r || sd < 0 ||\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n          // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++);\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n          // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n      return x;\n    }\n\n    // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n     * number in the direction of Infinity.\r\n     */\n    P.ceil = function () {\n      return round(new BigNumber(this), this.e + 1, 2);\n    };\n\n    /*\r\n     * Return\r\n     * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * 0 if they have the same value,\r\n     * or null if the value of either is NaN.\r\n     */\n    P.comparedTo = P.cmp = function (y, b) {\n      id = 1;\n      return compare(this, new BigNumber(y, b));\n    };\n\n    /*\r\n     * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n     * of this BigNumber is ±Infinity or NaN.\r\n     */\n    P.decimalPlaces = P.dp = function () {\n      var n,\n        v,\n        c = this.c;\n      if (!c) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.dividedBy = P.div = function (y, b) {\n      id = 3;\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n    P.dividedToIntegerBy = P.divToInt = function (y, b) {\n      id = 4;\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n    P.equals = P.eq = function (y, b) {\n      id = 5;\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n     * number in the direction of -Infinity.\r\n     */\n    P.floor = function () {\n      return round(new BigNumber(this), this.e + 1, 3);\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n    P.greaterThan = P.gt = function (y, b) {\n      id = 6;\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise returns false.\r\n     */\n    P.greaterThanOrEqualTo = P.gte = function (y, b) {\n      id = 7;\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n    P.isInteger = P.isInt = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n     */\n    P.isNegative = P.isNeg = function () {\n      return this.s < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise returns false.\r\n     */\n    P.lessThan = P.lt = function (y, b) {\n      id = 8;\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise returns false.\r\n     */\n    P.lessThanOrEqualTo = P.lte = function (y, b) {\n      id = 9;\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.minus = P.sub = function (y, b) {\n      var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n      id = 10;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0));\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n          --xc[i];\n          xc[j] += BASE;\n        }\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n      // Zero?\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q,\n        s,\n        x = this;\n      id = 11;\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n        // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n      return x.minus(q.times(y));\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n    P.negated = P.neg = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.plus = P.add = function (y, b) {\n      var t,\n        x = this,\n        a = x.s;\n      id = 12;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n        t.reverse();\n        for (; a--; t.push(0));\n        t.reverse();\n      }\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     * Return the number of significant digits of the value of this BigNumber.\r\n     *\r\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n     */\n    P.precision = P.sd = function (z) {\n      var n,\n        v,\n        x = this,\n        c = x.c;\n\n      // 'precision() argument not a boolean or binary digit: {z}'\n      if (z != null && z !== !!z && z !== 1 && z !== 0) {\n        if (ERRORS) raise(13, 'argument' + notBool, z);\n        if (z != !!z) z = null;\n      }\n      if (!c) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--);\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n      if (z && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n     * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n     * omitted.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'round() decimal places out of range: {dp}'\r\n     * 'round() decimal places not an integer: {dp}'\r\n     * 'round() rounding mode not an integer: {rm}'\r\n     * 'round() rounding mode out of range: {rm}'\r\n     */\n    P.round = function (dp, rm) {\n      var n = new BigNumber(this);\n      if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n        round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n      }\n      return n;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n     * otherwise.\r\n     *\r\n     * 'shift() argument not an integer: {k}'\r\n     * 'shift() argument out of range: {k}'\r\n     */\n    P.shift = function (k) {\n      var n = this;\n      return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')\n\n      // k < 1e+21, or truncate(k) will produce exponential notation.\n      ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n    };\n\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt( N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt( I) =  I\r\n     *  sqrt( 0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+x);\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.times = P.mul = function (y, b) {\n      var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (id = 17, y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n            // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n        return y;\n      }\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n        zc[j] = c;\n      }\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n      return normalise(y, zc, e);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n     * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toDigits() precision out of range: {sd}'\r\n     * 'toDigits() precision not an integer: {sd}'\r\n     * 'toDigits() rounding mode not an integer: {rm}'\r\n     * 'toDigits() rounding mode out of range: {rm}'\r\n     */\n    P.toDigits = function (sd, rm) {\n      var n = new BigNumber(this);\n      sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n      rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n      return sd ? round(n, sd, rm) : n;\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toExponential() decimal places not an integer: {dp}'\r\n     * 'toExponential() decimal places out of range: {dp}'\r\n     * 'toExponential() rounding mode not an integer: {rm}'\r\n     * 'toExponential() rounding mode out of range: {rm}'\r\n     */\n    P.toExponential = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toFixed() decimal places not an integer: {dp}'\r\n     * 'toFixed() decimal places out of range: {dp}'\r\n     * 'toFixed() rounding mode not an integer: {rm}'\r\n     * 'toFixed() rounding mode out of range: {rm}'\r\n     */\n    P.toFixed = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.config).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toFormat() decimal places not an integer: {dp}'\r\n     * 'toFormat() decimal places out of range: {dp}'\r\n     * 'toFormat() rounding mode not an integer: {rm}'\r\n     * 'toFormat() rounding mode out of range: {rm}'\r\n     */\n    P.toFormat = function (dp, rm) {\n      var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n      if (this.c) {\n        var i,\n          arr = str.split('.'),\n          g1 = +FORMAT.groupSize,\n          g2 = +FORMAT.secondaryGroupSize,\n          groupSeparator = FORMAT.groupSeparator,\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = this.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n        str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n      }\n      return str;\n    };\n\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n     *\r\n     * 'toFraction() max denominator not an integer: {md}'\r\n     * 'toFraction() max denominator out of range: {md}'\r\n     */\n    P.toFraction = function (md) {\n      var arr,\n        d0,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        q,\n        s,\n        k = ERRORS,\n        x = this,\n        xc = x.c,\n        d = new BigNumber(ONE),\n        n1 = d0 = new BigNumber(ONE),\n        d1 = n0 = new BigNumber(ONE);\n      if (md != null) {\n        ERRORS = false;\n        n = new BigNumber(md);\n        ERRORS = k;\n        if (!(k = n.isInt()) || n.lt(ONE)) {\n          if (ERRORS) {\n            raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n          }\n\n          // ERRORS is false:\n          // If md is a finite non-integer >= 1, round it to an integer and use it.\n          md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n        }\n      }\n      if (!xc) return x.toString();\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e *= 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n      MAX_EXP = exp;\n      return arr;\n    };\n\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n    P.toNumber = function () {\n      return +this;\n    };\n\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n     * ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are positive integers,\r\n     * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n     *\r\n     * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * 'pow() exponent not an integer: {n}'\r\n     * 'pow() exponent out of range: {n}'\r\n     *\r\n     * Performs 54 loop iterations for n of 9007199254740991.\r\n     */\n    P.toPower = P.pow = function (n, m) {\n      var k,\n        y,\n        z,\n        i = mathfloor(n < 0 ? -n : +n),\n        x = this;\n      if (m != null) {\n        id = 23;\n        m = new BigNumber(m);\n      }\n\n      // Pass ±Infinity to Math.pow if exponent is out of range.\n      if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {\n        k = Math.pow(+x, n);\n        return new BigNumber(m ? k % m : k);\n      }\n      if (m) {\n        if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {\n          x = x.mod(m);\n        } else {\n          z = m;\n\n          // Nullify m so only a single mod operation is performed at the end.\n          m = null;\n        }\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        // (Using + 1.5 would give [9, 21] guard digits.)\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n      y = new BigNumber(ONE);\n      for (;;) {\n        if (i % 2) {\n          y = y.times(x);\n          if (!y.c) break;\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (m) {\n            y = y.mod(m);\n          }\n        }\n        i = mathfloor(i / 2);\n        if (!i) break;\n        x = x.times(x);\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (m) {\n          x = x.mod(m);\n        }\n      }\n      if (m) return y;\n      if (n < 0) y = ONE.div(y);\n      return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toPrecision() precision not an integer: {sd}'\r\n     * 'toPrecision() precision out of range: {sd}'\r\n     * 'toPrecision() rounding mode not an integer: {rm}'\r\n     * 'toPrecision() rounding mode out of range: {rm}'\r\n     */\n    P.toPrecision = function (sd, rm) {\n      return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to 64 inclusive.\r\n     *\r\n     * 'toString() base not an integer: {b}'\r\n     * 'toString() base out of range: {b}'\r\n     */\n    P.toString = function (b) {\n      var str,\n        n = this,\n        s = n.s,\n        e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        str = coeffToString(n.c);\n        if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n        } else {\n          str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n        }\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n      return str;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n     * number.\r\n     */\n    P.truncated = P.trunc = function () {\n      return round(new BigNumber(this), this.e + 1, 1);\n    };\n\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n    P.valueOf = P.toJSON = function () {\n      var str,\n        n = this,\n        e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n      return n.s < 0 ? '-' + str : str;\n    };\n    P.isBigNumber = true;\n    if (config != null) BigNumber.config(config);\n    return BigNumber;\n  }\n\n  // PRIVATE HELPER FUNCTIONS\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s);\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n    return r.slice(0, j + 1 || 1);\n  }\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n  /*\r\n   * Return true if n is a valid number in range, otherwise false.\r\n   * Use for argument validation when ERRORS is false.\r\n   * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n   */\n  function intValidatorNoErrors(n, min, max) {\n    return (n = truncate(n)) >= min && n <= max;\n  }\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) == '[object Array]';\n  }\n\n  /*\r\n   * Convert string of baseIn to an array of numbers of baseOut.\r\n   * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n   * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n   */\n  function toBaseOut(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      len = str.length;\n    for (; i < len;) {\n      for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n      arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n      for (; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] == null) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n    return arr.reverse();\n  }\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n  function toFixedPoint(str, e) {\n    var len, z;\n\n    // Negative exponent?\n    if (e < 0) {\n      // Prepend zeros.\n      for (z = '0.'; ++e; z += '0');\n      str = z + str;\n\n      // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (z = '0', e -= len; --e; z += '0');\n        str += z;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n    return str;\n  }\n  function truncate(n) {\n    n = parseFloat(n);\n    return n < 0 ? mathceil(n) : mathfloor(n);\n  }\n\n  // EXPORT\n\n  BigNumber = constructorFactory();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    });\n\n    // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n\n    // Browser.\n  } else {\n    if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();\n    globalObj.BigNumber = BigNumber;\n  }\n})(this);","map":{"version":3,"names":["globalObj","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","notBool","roundingMode","tooManyDigits","ALPHABET","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","constructorFactory","config","div","parseNumeric","id","P","prototype","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","isValidInt","intValidatorWithErrors","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","n","b","c","e","i","num","len","str","x","raise","s","slice","test","charCodeAt","round","RegExp","replace","length","convertBase","indexOf","search","substring","push","another","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","v","p","r","a","arguments","o","has","hasOwnProperty","isArray","intValidatorNoErrors","crypto","getRandomValues","randomBytes","max","maxOrMin","lt","min","gt","random","pow2_53","random53bitInt","dp","k","rand","Uint32Array","copy","pop","splice","baseOut","baseIn","sign","d","xc","y","rm","toLowerCase","pow","toBaseOut","toFixedPoint","coeffToString","concat","charAt","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","caller","c0","ne","toString","toExponential","args","method","call","name","truncate","normalise","j","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","msg","val","error","Error","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","reverse","modulo","mod","times","negated","neg","add","precision","z","shift","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toNumber","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","isBigNumber","l","obj","Object","arrL","define","amd","module","exports","self","Function"],"sources":["C:/Users/alero/node_modules/bignumber.js/bignumber.js"],"sourcesContent":["/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.1.0\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.splice(0, 1) );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.splice(0, 1);\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.splice(0, 1), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if ( config != null ) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes, makeError, assert, assertArgument, FetchRequest, resolveProperties } from \"../utils/index.js\";\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n  if (value == null || Primitive.indexOf(typeof value) >= 0) {\n    return value;\n  }\n  // Keep any Addressable\n  if (typeof value.getAddress === \"function\") {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    return value.map(deepCopy);\n  }\n  if (typeof value === \"object\") {\n    return Object.keys(value).reduce((accum, key) => {\n      accum[key] = value[key];\n      return accum;\n    }, {});\n  }\n  throw new Error(`should not happen: ${value} (${typeof value})`);\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nfunction isPollable(value) {\n  return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n  polling: false,\n  staticNetwork: null,\n  batchStallTime: 10,\n  batchMaxSize: 1 << 20,\n  batchMaxCount: 100,\n  cacheTimeout: 250,\n  pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nexport class JsonRpcSigner extends AbstractSigner {\n  address;\n  constructor(provider, address) {\n    super(provider);\n    address = getAddress(address);\n    defineProperties(this, {\n      address\n    });\n  }\n  connect(provider) {\n    assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"signer.connect\"\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  // JSON-RPC will automatially fill in nonce, etc. so we just check from\n  async populateTransaction(tx) {\n    return await this.populateCall(tx);\n  }\n  // Returns just the hash of the transaction after sent, which is what\n  // the bare JSON-RPC API does;\n  async sendUncheckedTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    const promises = [];\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const _from = tx.from;\n      promises.push((async () => {\n        const from = await resolveAddress(_from, this.provider);\n        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n        tx.from = from;\n      })());\n    } else {\n      tx.from = this.address;\n    }\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (tx.gasLimit == null) {\n      promises.push((async () => {\n        tx.gasLimit = await this.provider.estimateGas({\n          ...tx,\n          from: this.address\n        });\n      })());\n    }\n    // The address may be an ENS name or Addressable\n    if (tx.to != null) {\n      const _to = tx.to;\n      promises.push((async () => {\n        tx.to = await resolveAddress(_to, this.provider);\n      })());\n    }\n    // Wait until all of our properties are filled in\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n  }\n  async sendTransaction(tx) {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider.getBlockNumber();\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(tx);\n    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n    // for a response, and we need the actual transaction, so we poll\n    // for it; it should show up very quickly\n    return await new Promise((resolve, reject) => {\n      const timeouts = [1000, 100];\n      const checkTx = async () => {\n        // Try getting the transaction\n        const tx = await this.provider.getTransaction(hash);\n        if (tx != null) {\n          resolve(tx.replaceableTransaction(blockNumber));\n          return;\n        }\n        // Wait another 4 seconds\n        this.provider._setTimeout(() => {\n          checkTx();\n        }, timeouts.pop() || 4000);\n      };\n      checkTx();\n    });\n  }\n  async signTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const from = await resolveAddress(tx.from, this.provider);\n      assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n      tx.from = from;\n    } else {\n      tx.from = this.address;\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n  }\n  async signMessage(_message) {\n    const message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n    return await this.provider.send(\"personal_sign\", [hexlify(message), this.address.toLowerCase()]);\n  }\n  async signTypedData(domain, types, _value) {\n    const value = deepCopy(_value);\n    // Populate any ENS names (in-place)\n    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async value => {\n      const address = await resolveAddress(value);\n      assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n      return address;\n    });\n    return await this.provider.send(\"eth_signTypedData_v4\", [this.address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n  }\n  async unlock(password) {\n    return this.provider.send(\"personal_unlockAccount\", [this.address.toLowerCase(), password, null]);\n  }\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n  async _legacySignMessage(_message) {\n    const message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n    return await this.provider.send(\"eth_sign\", [this.address.toLowerCase(), hexlify(message)]);\n  }\n}\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport class JsonRpcApiProvider extends AbstractProvider {\n  #options;\n  // The next ID to use for the JSON-RPC ID field\n  #nextId;\n  // Payloads are queued and triggered in batches using the drainTimer\n  #payloads;\n  #drainTimer;\n  #notReady;\n  #network;\n  #scheduleDrain() {\n    if (this.#drainTimer) {\n      return;\n    }\n    // If we aren't using batching, no hard in sending it immeidately\n    const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n    this.#drainTimer = setTimeout(() => {\n      this.#drainTimer = null;\n      const payloads = this.#payloads;\n      this.#payloads = [];\n      while (payloads.length) {\n        // Create payload batches that satisfy our batch constraints\n        const batch = [payloads.shift()];\n        while (payloads.length) {\n          if (batch.length === this.#options.batchMaxCount) {\n            break;\n          }\n          batch.push(payloads.shift());\n          const bytes = JSON.stringify(batch.map(p => p.payload));\n          if (bytes.length > this.#options.batchMaxSize) {\n            payloads.unshift(batch.pop());\n            break;\n          }\n        }\n        // Process the result to each payload\n        (async () => {\n          const payload = batch.length === 1 ? batch[0].payload : batch.map(p => p.payload);\n          this.emit(\"debug\", {\n            action: \"sendRpcPayload\",\n            payload\n          });\n          try {\n            const result = await this._send(payload);\n            this.emit(\"debug\", {\n              action: \"receiveRpcResult\",\n              result\n            });\n            // Process results in batch order\n            for (const {\n              resolve,\n              reject,\n              payload\n            } of batch) {\n              if (this.destroyed) {\n                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                  operation: payload.method\n                }));\n                continue;\n              }\n              // Find the matching result\n              const resp = result.filter(r => r.id === payload.id)[0];\n              // No result; the node failed us in unexpected ways\n              if (resp == null) {\n                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                  value: result,\n                  info: {\n                    payload\n                  }\n                });\n                this.emit(\"error\", error);\n                reject(error);\n                continue;\n              }\n              // The response is an error\n              if (\"error\" in resp) {\n                reject(this.getRpcError(payload, resp));\n                continue;\n              }\n              // All good; send the result\n              resolve(resp.result);\n            }\n          } catch (error) {\n            this.emit(\"debug\", {\n              action: \"receiveRpcError\",\n              error\n            });\n            for (const {\n              reject\n            } of batch) {\n              // @TODO: augment the error with the payload\n              reject(error);\n            }\n          }\n        })();\n      }\n    }, stallTime);\n  }\n  constructor(network, options) {\n    super(network, options);\n    this.#nextId = 1;\n    this.#options = Object.assign({}, defaultOptions, options || {});\n    this.#payloads = [];\n    this.#drainTimer = null;\n    this.#network = null;\n    {\n      let resolve = null;\n      const promise = new Promise(_resolve => {\n        resolve = _resolve;\n      });\n      this.#notReady = {\n        promise,\n        resolve\n      };\n    }\n    // Make sure any static network is compatbile with the provided netwrok\n    const staticNetwork = this._getOption(\"staticNetwork\");\n    if (staticNetwork) {\n      assertArgument(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n      this.#network = staticNetwork;\n    }\n  }\n  /**\n   *  Returns the value associated with the option %%key%%.\n   *\n   *  Sub-classes can use this to inquire about configuration options.\n   */\n  _getOption(key) {\n    return this.#options[key];\n  }\n  /**\n   *  Gets the [[Network]] this provider has committed to. On each call, the network\n   *  is detected, and if it has changed, the call will reject.\n   */\n  get _network() {\n    assert(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n    return this.#network;\n  }\n  /**\n   *  Resolves to the non-normalized value by performing %%req%%.\n   *\n   *  Sub-classes may override this to modify behavior of actions,\n   *  and should generally call ``super._perform`` as a fallback.\n   */\n  async _perform(req) {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      let tx = req.transaction;\n      if (tx && tx.type != null && getBigInt(tx.type)) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          const feeData = await this.getFeeData();\n          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n            // Network doesn't know about EIP-1559 (and hence type)\n            req = Object.assign({}, req, {\n              transaction: Object.assign({}, tx, {\n                type: undefined\n              })\n            });\n          }\n        }\n      }\n    }\n    const request = this.getRpcRequest(req);\n    if (request != null) {\n      return await this.send(request.method, request.args);\n    }\n    return super._perform(req);\n  }\n  /**\n   *  Sub-classes may override this; it detects the *actual* network that\n   *  we are **currently** connected to.\n   *\n   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n   *  _send primitive must be used instead.\n   */\n  async _detectNetwork() {\n    const network = this._getOption(\"staticNetwork\");\n    if (network) {\n      return network;\n    }\n    // If we are ready, use ``send``, which enabled requests to be batched\n    if (this.ready) {\n      return Network.from(getBigInt(await this.send(\"eth_chainId\", [])));\n    }\n    // We are not ready yet; use the primitive _send\n    const payload = {\n      id: this.#nextId++,\n      method: \"eth_chainId\",\n      params: [],\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"sendRpcPayload\",\n      payload\n    });\n    let result;\n    try {\n      result = (await this._send(payload))[0];\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveRpcError\",\n        error\n      });\n      throw error;\n    }\n    this.emit(\"debug\", {\n      action: \"receiveRpcResult\",\n      result\n    });\n    if (\"result\" in result) {\n      return Network.from(getBigInt(result.result));\n    }\n    throw this.getRpcError(payload, result);\n  }\n  /**\n   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n   *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n   *  ``super._start()`` **MUST** be called.\n   *\n   *  Calling it multiple times is safe and has no effect.\n   */\n  _start() {\n    if (this.#notReady == null || this.#notReady.resolve == null) {\n      return;\n    }\n    this.#notReady.resolve();\n    this.#notReady = null;\n    (async () => {\n      // Bootstrap the network\n      while (this.#network == null && !this.destroyed) {\n        try {\n          this.#network = await this._detectNetwork();\n        } catch (error) {\n          if (this.destroyed) {\n            break;\n          }\n          console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n          this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n            event: \"initial-network-discovery\",\n            info: {\n              error\n            }\n          }));\n          await stall(1000);\n        }\n      }\n      // Start dispatching requests\n      this.#scheduleDrain();\n    })();\n  }\n  /**\n   *  Resolves once the [[_start]] has been called. This can be used in\n   *  sub-classes to defer sending data until the connection has been\n   *  established.\n   */\n  async _waitUntilReady() {\n    if (this.#notReady == null) {\n      return;\n    }\n    return await this.#notReady.promise;\n  }\n  /**\n   *  Return a Subscriber that will manage the %%sub%%.\n   *\n   *  Sub-classes may override this to modify the behavior of\n   *  subscription management.\n   */\n  _getSubscriber(sub) {\n    // Pending Filters aren't availble via polling\n    if (sub.type === \"pending\") {\n      return new FilterIdPendingSubscriber(this);\n    }\n    if (sub.type === \"event\") {\n      if (this._getOption(\"polling\")) {\n        return new PollingEventSubscriber(this, sub.filter);\n      }\n      return new FilterIdEventSubscriber(this, sub.filter);\n    }\n    // Orphaned Logs are handled automatically, by the filter, since\n    // logs with removed are emitted by it\n    if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n      return new UnmanagedSubscriber(\"orphan\");\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Returns true only if the [[_start]] has been called.\n   */\n  get ready() {\n    return this.#notReady == null;\n  }\n  /**\n   *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n   *  which has all values hexlified and any numeric values converted\n   *  to Quantity values.\n   */\n  getRpcTransaction(tx) {\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      let dstKey = key;\n      if (key === \"gasLimit\") {\n        dstKey = \"gas\";\n      }\n      result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));\n    });\n    // Make sure addresses and data are lowercase\n    [\"from\", \"to\", \"data\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      result[key] = hexlify(tx[key]);\n    });\n    // Normalize the access list object\n    if (tx.accessList) {\n      result[\"accessList\"] = accessListify(tx.accessList);\n    }\n    return result;\n  }\n  /**\n   *  Returns the request method and arguments required to perform\n   *  %%req%%.\n   */\n  getRpcRequest(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return {\n          method: \"eth_chainId\",\n          args: []\n        };\n      case \"getBlockNumber\":\n        return {\n          method: \"eth_blockNumber\",\n          args: []\n        };\n      case \"getGasPrice\":\n        return {\n          method: \"eth_gasPrice\",\n          args: []\n        };\n      case \"getBalance\":\n        return {\n          method: \"eth_getBalance\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getTransactionCount\":\n        return {\n          method: \"eth_getTransactionCount\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getCode\":\n        return {\n          method: \"eth_getCode\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getStorage\":\n        return {\n          method: \"eth_getStorageAt\",\n          args: [getLowerCase(req.address), \"0x\" + req.position.toString(16), req.blockTag]\n        };\n      case \"broadcastTransaction\":\n        return {\n          method: \"eth_sendRawTransaction\",\n          args: [req.signedTransaction]\n        };\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return {\n            method: \"eth_getBlockByNumber\",\n            args: [req.blockTag, !!req.includeTransactions]\n          };\n        } else if (\"blockHash\" in req) {\n          return {\n            method: \"eth_getBlockByHash\",\n            args: [req.blockHash, !!req.includeTransactions]\n          };\n        }\n        break;\n      case \"getTransaction\":\n        return {\n          method: \"eth_getTransactionByHash\",\n          args: [req.hash]\n        };\n      case \"getTransactionReceipt\":\n        return {\n          method: \"eth_getTransactionReceipt\",\n          args: [req.hash]\n        };\n      case \"call\":\n        return {\n          method: \"eth_call\",\n          args: [this.getRpcTransaction(req.transaction), req.blockTag]\n        };\n      case \"estimateGas\":\n        {\n          return {\n            method: \"eth_estimateGas\",\n            args: [this.getRpcTransaction(req.transaction)]\n          };\n        }\n      case \"getLogs\":\n        if (req.filter && req.filter.address != null) {\n          if (Array.isArray(req.filter.address)) {\n            req.filter.address = req.filter.address.map(getLowerCase);\n          } else {\n            req.filter.address = getLowerCase(req.filter.address);\n          }\n        }\n        return {\n          method: \"eth_getLogs\",\n          args: [req.filter]\n        };\n    }\n    return null;\n  }\n  /**\n   *  Returns an ethers-style Error for the given JSON-RPC error\n   *  %%payload%%, coalescing the various strings and error shapes\n   *  that different nodes return, coercing them into a machine-readable\n   *  standardized error.\n   */\n  getRpcError(payload, _error) {\n    const {\n      method\n    } = payload;\n    const {\n      error\n    } = _error;\n    if (method === \"eth_estimateGas\" && error.message) {\n      const msg = error.message;\n      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n        return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: payload.params[0],\n          info: {\n            payload,\n            error\n          }\n        });\n      }\n    }\n    if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n      const result = spelunkData(error);\n      const e = AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n      e.info = {\n        error,\n        payload\n      };\n      return e;\n    }\n    // Only estimateGas and call can return arbitrary contract-defined text, so now we\n    // we can process text safely.\n    const message = JSON.stringify(spelunkMessage(error));\n    if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n      const actionMap = {\n        eth_sign: \"signMessage\",\n        personal_sign: \"signMessage\",\n        eth_signTypedData_v4: \"signTypedData\",\n        eth_signTransaction: \"signTransaction\",\n        eth_sendTransaction: \"sendTransaction\",\n        eth_requestAccounts: \"requestAccess\",\n        wallet_requestAccounts: \"requestAccess\"\n      };\n      return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n        action: actionMap[method] || \"unknown\",\n        reason: \"rejected\",\n        info: {\n          payload,\n          error\n        }\n      });\n    }\n    if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n      const transaction = payload.params[0];\n      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/nonce/i) && message.match(/too low/i)) {\n        return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      // \"replacement transaction underpriced\"\n      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n        return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/only replay-protected/i)) {\n        return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n          operation: method,\n          info: {\n            transaction,\n            info: {\n              error\n            }\n          }\n        });\n      }\n    }\n    let unsupported = !!message.match(/the method .* does not exist/i);\n    if (!unsupported) {\n      if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n        unsupported = true;\n      }\n    }\n    if (unsupported) {\n      return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method,\n        info: {\n          error,\n          payload\n        }\n      });\n    }\n    return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n      error,\n      payload\n    });\n  }\n  /**\n   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n   *  over the underlying channel. This can be used to call methods\n   *  on the backend that do not have a high-level API within the Provider\n   *  API.\n   *\n   *  This method queues requests according to the batch constraints\n   *  in the options, assigns the request a unique ID.\n   *\n   *  **Do NOT override** this method in sub-classes; instead\n   *  override [[_send]] or force the options values in the\n   *  call to the constructor to modify this method's behavior.\n   */\n  send(method, params) {\n    // @TODO: cache chainId?? purge on switch_networks\n    // We have been destroyed; no operations are supported anymore\n    if (this.destroyed) {\n      return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: method\n      }));\n    }\n    const id = this.#nextId++;\n    const promise = new Promise((resolve, reject) => {\n      this.#payloads.push({\n        resolve,\n        reject,\n        payload: {\n          method,\n          params,\n          id,\n          jsonrpc: \"2.0\"\n        }\n      });\n    });\n    // If there is not a pending drainTimer, set one\n    this.#scheduleDrain();\n    return promise;\n  }\n  /**\n   *  Resolves to the [[Signer]] account for  %%address%% managed by\n   *  the client.\n   *\n   *  If the %%address%% is a number, it is used as an index in the\n   *  the accounts from [[listAccounts]].\n   *\n   *  This can only be used on clients which manage accounts (such as\n   *  Geth with imported account or MetaMask).\n   *\n   *  Throws if the account doesn't exist.\n   */\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accountsPromise = this.send(\"eth_accounts\", []);\n    // Account index\n    if (typeof address === \"number\") {\n      const accounts = await accountsPromise;\n      if (address >= accounts.length) {\n        throw new Error(\"no such account\");\n      }\n      return new JsonRpcSigner(this, accounts[address]);\n    }\n    const {\n      accounts\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      accounts: accountsPromise\n    });\n    // Account address\n    address = getAddress(address);\n    for (const account of accounts) {\n      if (getAddress(account) === address) {\n        return new JsonRpcSigner(this, address);\n      }\n    }\n    throw new Error(\"invalid account\");\n  }\n  async listAccounts() {\n    const accounts = await this.send(\"eth_accounts\", []);\n    return accounts.map(a => new JsonRpcSigner(this, a));\n  }\n  destroy() {\n    // Stop processing requests\n    if (this.#drainTimer) {\n      clearTimeout(this.#drainTimer);\n      this.#drainTimer = null;\n    }\n    // Cancel all pending requests\n    for (const {\n      payload,\n      reject\n    } of this.#payloads) {\n      reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method\n      }));\n    }\n    this.#payloads = [];\n    // Parent clean-up\n    super.destroy();\n  }\n}\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n  #pollingInterval;\n  constructor(network, options) {\n    super(network, options);\n    this.#pollingInterval = 4000;\n  }\n  _getSubscriber(sub) {\n    const subscriber = super._getSubscriber(sub);\n    if (isPollable(subscriber)) {\n      subscriber.pollingInterval = this.#pollingInterval;\n    }\n    return subscriber;\n  }\n  /**\n   *  The polling interval (default: 4000 ms)\n   */\n  get pollingInterval() {\n    return this.#pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (!Number.isInteger(value) || value < 0) {\n      throw new Error(\"invalid interval\");\n    }\n    this.#pollingInterval = value;\n    this._forEachSubscriber(sub => {\n      if (isPollable(sub)) {\n        sub.pollingInterval = this.#pollingInterval;\n      }\n    });\n  }\n}\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n  #connect;\n  constructor(url, network, options) {\n    if (url == null) {\n      url = \"http:/\\/localhost:8545\";\n    }\n    super(network, options);\n    if (typeof url === \"string\") {\n      this.#connect = new FetchRequest(url);\n    } else {\n      this.#connect = url.clone();\n    }\n  }\n  _getConnection() {\n    return this.#connect.clone();\n  }\n  async send(method, params) {\n    // All requests are over HTTP, so we can just start handling requests\n    // We do this here rather than the constructor so that we don't send any\n    // requests to the network (i.e. eth_chainId) until we absolutely have to.\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    // Configure a POST connection for the requested method\n    const request = this._getConnection();\n    request.body = JSON.stringify(payload);\n    request.setHeader(\"content-type\", \"application/json\");\n    const response = await request.send();\n    response.assertOk();\n    let resp = response.bodyJson;\n    if (!Array.isArray(resp)) {\n      resp = [resp];\n    }\n    return resp;\n  }\n}\nfunction spelunkData(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunkData(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunkData(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction _spelunkMessage(value, result) {\n  if (value == null) {\n    return;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\") {\n    result.push(value.message);\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      _spelunkMessage(value[key], result);\n    }\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return _spelunkMessage(JSON.parse(value), result);\n    } catch (error) {}\n  }\n}\nfunction spelunkMessage(value) {\n  const result = [];\n  _spelunkMessage(value, result);\n  return result;\n}","map":{"version":3,"names":["AbiCoder","getAddress","resolveAddress","TypedDataEncoder","accessListify","defineProperties","getBigInt","hexlify","isHexString","toQuantity","toUtf8Bytes","makeError","assert","assertArgument","FetchRequest","resolveProperties","AbstractProvider","UnmanagedSubscriber","AbstractSigner","Network","FilterIdEventSubscriber","FilterIdPendingSubscriber","PollingEventSubscriber","Primitive","split","deepCopy","value","indexOf","Array","isArray","map","Object","keys","reduce","accum","key","Error","stall","duration","Promise","resolve","setTimeout","getLowerCase","toLowerCase","isPollable","pollingInterval","defaultOptions","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","cacheTimeout","JsonRpcSigner","address","constructor","provider","connect","operation","populateTransaction","tx","populateCall","sendUncheckedTransaction","_tx","promises","from","_from","push","gasLimit","estimateGas","to","_to","length","all","hexTx","getRpcTransaction","send","sendTransaction","blockNumber","getBlockNumber","hash","reject","timeouts","checkTx","getTransaction","replaceableTransaction","_setTimeout","pop","signTransaction","signMessage","_message","message","signTypedData","domain","types","_value","populated","resolveNames","JSON","stringify","getPayload","unlock","password","_legacySignMessage","JsonRpcApiProvider","options","nextId","payloads","drainTimer","notReady","network","scheduleDrain","#scheduleDrain","stallTime","_getOption","batch","shift","bytes","p","payload","unshift","emit","action","result","_send","destroyed","method","resp","filter","r","id","error","info","getRpcError","assign","promise","_resolve","matches","_network","_perform","req","transaction","type","maxFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","undefined","request","getRpcRequest","args","_detectNetwork","ready","params","jsonrpc","_start","console","log","event","_waitUntilReady","_getSubscriber","sub","orphan","forEach","dstKey","accessList","blockTag","position","toString","signedTransaction","includeTransactions","blockHash","_error","msg","match","spelunkData","e","getBuiltinCallException","data","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","reason","unsupported","details","startsWith","getSigner","accountsPromise","accounts","getNetwork","account","listAccounts","a","destroy","clearTimeout","JsonRpcApiPollingProvider","subscriber","Number","isInteger","_forEachSubscriber","JsonRpcProvider","url","clone","_getConnection","body","setHeader","response","assertOk","bodyJson","parse","_spelunkMessage"],"sources":["C:/Users/alero/OneDrive/Documentos/GitHub/proyecto/parte C/node_modules/ethers/lib.esm/providers/provider-jsonrpc.js"],"sourcesContent":["/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes, makeError, assert, assertArgument, FetchRequest, resolveProperties } from \"../utils/index.js\";\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n    if (value == null || Primitive.indexOf(typeof (value)) >= 0) {\n        return value;\n    }\n    // Keep any Addressable\n    if (typeof (value.getAddress) === \"function\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return (value.map(deepCopy));\n    }\n    if (typeof (value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = value[key];\n            return accum;\n        }, {});\n    }\n    throw new Error(`should not happen: ${value} (${typeof (value)})`);\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nfunction isPollable(value) {\n    return (value && typeof (value.pollingInterval) === \"number\");\n}\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n    batchStallTime: 10,\n    batchMaxSize: (1 << 20),\n    batchMaxCount: 100,\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nexport class JsonRpcSigner extends AbstractSigner {\n    address;\n    constructor(provider, address) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties(this, { address });\n    }\n    connect(provider) {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n    async getAddress() {\n        return this.address;\n    }\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx) {\n        return await this.populateCall(tx);\n    }\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        const promises = [];\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        }\n        else {\n            tx.from = this.address;\n        }\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });\n            })());\n        }\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n        // Wait until all of our properties are filled in\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n    }\n    async sendTransaction(tx) {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [1000, 100];\n            const checkTx = async () => {\n                // Try getting the transaction\n                const tx = await this.provider.getTransaction(hash);\n                if (tx != null) {\n                    resolve(tx.replaceableTransaction(blockNumber));\n                    return;\n                }\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n    async signTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        }\n        else {\n            tx.from = this.address;\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n    }\n    async signMessage(_message) {\n        const message = ((typeof (_message) === \"string\") ? toUtf8Bytes(_message) : _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase()\n        ]);\n    }\n    async signTypedData(domain, types, _value) {\n        const value = deepCopy(_value);\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n    async unlock(password) {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null\n        ]);\n    }\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message) {\n        const message = ((typeof (_message) === \"string\") ? toUtf8Bytes(_message) : _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message)\n        ]);\n    }\n}\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport class JsonRpcApiProvider extends AbstractProvider {\n    #options;\n    // The next ID to use for the JSON-RPC ID field\n    #nextId;\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads;\n    #drainTimer;\n    #notReady;\n    #network;\n    #scheduleDrain() {\n        if (this.#drainTimer) {\n            return;\n        }\n        // If we aren't using batching, no hard in sending it immeidately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0 : this._getOption(\"batchStallTime\");\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n            const payloads = this.#payloads;\n            this.#payloads = [];\n            while (payloads.length) {\n                // Create payload batches that satisfy our batch constraints\n                const batch = [(payloads.shift())];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) {\n                        break;\n                    }\n                    batch.push((payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift((batch.pop()));\n                        break;\n                    }\n                }\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload : batch.map((p) => p.payload));\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n                    }\n                    catch (error) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n    constructor(network, options) {\n        super(network, options);\n        this.#nextId = 1;\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        this.#payloads = [];\n        this.#drainTimer = null;\n        this.#network = null;\n        {\n            let resolve = null;\n            const promise = new Promise((_resolve) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n        // Make sure any static network is compatbile with the provided netwrok\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (staticNetwork) {\n            assertArgument(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption(key) {\n        return this.#options[key];\n    }\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network() {\n        assert(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req) {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({}, req, {\n                            transaction: Object.assign({}, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n        const request = this.getRpcRequest(req);\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n        return super._perform(req);\n    }\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork() {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            return network;\n        }\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            return Network.from(getBigInt(await this.send(\"eth_chainId\", [])));\n        }\n        // We are not ready yet; use the primitive _send\n        const payload = {\n            id: this.#nextId++, method: \"eth_chainId\", params: [], jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n        let result;\n        try {\n            result = (await this._send(payload))[0];\n        }\n        catch (error) {\n            this.emit(\"debug\", { action: \"receiveRpcError\", error });\n            throw error;\n        }\n        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n        if (\"result\" in result) {\n            return Network.from(getBigInt(result.result));\n        }\n        throw this.getRpcError(payload, result);\n    }\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start() {\n        if (this.#notReady == null || this.#notReady.resolve == null) {\n            return;\n        }\n        this.#notReady.resolve();\n        this.#notReady = null;\n        (async () => {\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                }\n                catch (error) {\n                    if (this.destroyed) {\n                        break;\n                    }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady() {\n        if (this.#notReady == null) {\n            return;\n        }\n        return await this.#notReady.promise;\n    }\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub) {\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") {\n            return new FilterIdPendingSubscriber(this);\n        }\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready() { return this.#notReady == null; }\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx) {\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            let dstKey = key;\n            if (key === \"gasLimit\") {\n                dstKey = \"gas\";\n            }\n            result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));\n        });\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            result[key] = hexlify(tx[key]);\n        });\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n        return result;\n    }\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req) {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [] };\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [] };\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [getLowerCase(req.address), req.blockTag]\n                };\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [req.signedTransaction]\n                };\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [req.blockTag, !!req.includeTransactions]\n                    };\n                }\n                else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [req.blockHash, !!req.includeTransactions]\n                    };\n                }\n                break;\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [req.hash]\n                };\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [req.hash]\n                };\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [this.getRpcTransaction(req.transaction), req.blockTag]\n                };\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [this.getRpcTransaction(req.transaction)]\n                };\n            }\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    }\n                    else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [req.filter] };\n        }\n        return null;\n    }\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload, _error) {\n        const { method } = payload;\n        const { error } = _error;\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: (payload.params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n            const e = AbiCoder.getBuiltinCallException((method === \"eth_call\") ? \"call\" : \"estimateGas\", (payload.params[0]), (result ? result.data : null));\n            e.info = { error, payload };\n            return e;\n        }\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n        const message = JSON.stringify(spelunkMessage(error));\n        if (typeof (error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\"),\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = (payload.params[0]);\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method, params) {\n        // @TODO: cache chainId?? purge on switch_networks\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n        return promise;\n    }\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accountsPromise = this.send(\"eth_accounts\", []);\n        // Account index\n        if (typeof (address) === \"number\") {\n            const accounts = (await accountsPromise);\n            if (address >= accounts.length) {\n                throw new Error(\"no such account\");\n            }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n        throw new Error(\"invalid account\");\n    }\n    async listAccounts() {\n        const accounts = await this.send(\"eth_accounts\", []);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n    destroy() {\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n        this.#payloads = [];\n        // Parent clean-up\n        super.destroy();\n    }\n}\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval;\n    constructor(network, options) {\n        super(network, options);\n        this.#pollingInterval = 4000;\n    }\n    _getSubscriber(sub) {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval() { return this.#pollingInterval; }\n    set pollingInterval(value) {\n        if (!Number.isInteger(value) || value < 0) {\n            throw new Error(\"invalid interval\");\n        }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect;\n    constructor(url, network, options) {\n        if (url == null) {\n            url = \"http:/\\/localhost:8545\";\n        }\n        super(network, options);\n        if (typeof (url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        }\n        else {\n            this.#connect = url.clone();\n        }\n    }\n    _getConnection() {\n        return this.#connect.clone();\n    }\n    async send(method, params) {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) {\n            resp = [resp];\n        }\n        return resp;\n    }\n}\nfunction spelunkData(value) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction _spelunkMessage(value, result) {\n    if (value == null) {\n        return;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\") {\n        result.push(value.message);\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        }\n        catch (error) { }\n    }\n}\nfunction spelunkMessage(value) {\n    const result = [];\n    _spelunkMessage(value, result);\n    return result;\n}\n//# sourceMappingURL=provider-jsonrpc.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}